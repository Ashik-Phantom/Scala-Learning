[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Ashik\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Ashik\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 16.0.2)
[debug]       Load.loadUnit: plugins took 39.1255ms
[debug]       Load.loadUnit: defsScala took 0.1214ms
[debug] [Loading] Scanning directory C:\Users\Ashik\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Ashik\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 7.0002 ms
[debug]           Load.resolveProject(global-plugins) took 21.1372ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Ashik\.sbt\1.0\plugins, plugins: List(<none>))) took 38.3642ms
[debug] [Loading] Done in C:\Users\Ashik\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 48.0292ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.0875ms
[debug]     Load.loadUnit(file:/C:/Users/Ashik/.sbt/1.0/plugins/, ...) took 91.4973ms
[debug]   Load.apply: load took 231.4071ms
[debug]   Load.apply: resolveProjects took 5.6771ms
[debug]   Load.apply: finalTransforms took 46.4086ms
[debug]   Load.apply: config.delegates took 4.4951ms
[debug]   Load.apply: Def.make(settings)... took 240.4141ms
[debug]   Load.apply: structureIndex took 104.0006ms
[debug]   Load.apply: mkStreams took 2.7469ms
[info] loading global plugins from C:\Users\Ashik\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2006.4383ms
[debug]           Load.loadUnit: plugins took 13.0704ms
[debug]           Load.loadUnit: defsScala took 0.02ms
[debug] [Loading] Scanning directory C:\Users\Ashik\IdeaProjects\Scala-Learning\project
[debug]             Load.loadUnit: mkEval took 4.4231ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Ashik\IdeaProjects\Scala-Learning\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3296 ms
[info] loading settings for project scala-learning-build from idea.sbt ...
[debug]               Load.resolveProject(scala-learning-build) took 1.4205ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-learning-build, base: C:\Users\Ashik\IdeaProjects\Scala-Learning\project, plugins: List(<none>))) took 3.0439ms
[debug] [Loading] Done in C:\Users\Ashik\IdeaProjects\Scala-Learning\project, returning: (scala-learning-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1194.8827ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.2872ms
[debug]         Load.loadUnit(file:/C:/Users/Ashik/IdeaProjects/Scala-Learning/project/, ...) took 1210.8707ms
[debug]       Load.apply: load took 1211.6237ms
[debug]       Load.apply: resolveProjects took 0.0662ms
[debug]       Load.apply: finalTransforms took 4.5488ms
[debug]       Load.apply: config.delegates took 0.2584ms
[debug]       Load.apply: Def.make(settings)... took 41.0165ms
[debug]       Load.apply: structureIndex took 16.0976ms
[debug]       Load.apply: mkStreams took 0.0015ms
[info] loading project definition from C:\Users\Ashik\IdeaProjects\Scala-Learning\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2060.3297ms
[debug]     Load.loadUnit: defsScala took 0.0018ms
[debug] [Loading] Scanning directory C:\Users\Ashik\IdeaProjects\Scala-Learning
[debug]       Load.loadUnit: mkEval took 0.1306ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6377 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 15.7155ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Ashik\IdeaProjects\Scala-Learning, plugins: List(<none>))) took 18.2289ms
[debug] [Loading] Done in C:\Users\Ashik\IdeaProjects\Scala-Learning, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 549.5838ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.1308ms
[debug]   Load.loadUnit(file:/C:/Users/Ashik/IdeaProjects/Scala-Learning/, ...) took 2615.5229ms
[debug] Load.apply: load took 2616.5356ms
[debug] Load.apply: resolveProjects took 0.0747ms
[debug] Load.apply: finalTransforms took 11.2367ms
[debug] Load.apply: config.delegates took 0.1653ms
[debug] Load.apply: Def.make(settings)... took 44.8841ms
[debug] Load.apply: structureIndex took 9.6153ms
[debug] Load.apply: mkStreams took 0.0017ms
[info] set current project to Scala-Learning (in build file:/C:/Users/Ashik/IdeaProjects/Scala-Learning/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64949 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64949, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scala-Learning (in build file:/C:/Users/Ashik/IdeaProjects/Scala-Learning/)
[debug] > Exec(idea-shell, None, None)
